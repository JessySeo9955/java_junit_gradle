/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.14/userguide/building_java_projects.html in the Gradle documentation.
 */
import org.gradle.api.tasks.testing.TestDescriptor
import org.gradle.api.tasks.testing.TestResult

plugins {
    // Apply the java-library plugin for API and implementation separation.
    `java-library`  // adds 'test' task
	`eclipse`
	`application`
}

application {
    // Specify the main class to run (entry point)
    mainClass.set("junit.gradle.HelloWorld")
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Used to write and run unit tests in src/test/java.
	testImplementation(libs.junit.jupiter) 


	// Enables Gradle (and IDEs) to discover and run JUnit 5 tests properly.
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

	// This dependency is part of your public API.
    // This dependency is exported to consumers, that is to say found on their compile classpath.
	// Apache Commons Math: A math library offering functions for statistics, geometry, linear algebra, etc.
    api(libs.commons.math3)

	// This is used by your code, but not exposed to users of your library/module.
    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
	// Google Guava: A utility library offering advanced collections, caching, functional programming, etc.
    implementation(libs.guava)
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// jar file location: junit.gradle\lib\build\libs\hello-world-app.jar
tasks.named<Jar>("jar") {
    manifest {
        attributes(
            "Main-Class" to "junit.gradle.HelloWorld" // This is required for the application JAR to run
        )
    }
	
	archiveBaseName.set("hello-world-app") // jar file name
    archiveVersion.set("1.0.0") // jar version
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
	
		
    // show standard out and standard error of the test JVM(s) on the console
	testLogging {
        events("passed", "skipped", "failed") // Specifies which test events to log
        showStandardStreams = true // Show standard output (System.out.println) and standard error (System.err) during test execution
    }
	
}
